version: 1.0
type: update
id: ragbackup-fileagent-addon
name: Hosteur Backup File Agent (Beta)

categories:
  - apps/dev-and-admin-tools

targetNodes: any

homepage: https://github.com/hosteur-sa-ch/rag-hosteur-backup-fileagent
baseUrl: https://raw.githubusercontent.com/hosteur-sa-ch/rag-hosteur-backup-fileagent/main
logo: images/logo-hosteur_ico_2021.png

description:
  text: https://raw.githubusercontent.com/hosteur-sa-ch/rag-hosteur-backup-fileagent/main/text/description_agent.md
  short: Hosteur Backup file agent Addon. Install this addon, only after Hosteur Backup Dashboard is installed.

success: Hosteur Backup File Agent is deployed.

globals:
  env: ${env.name}
  nodeID: ${targetNodes.id}
  nodeGroup: ${targetNodes.nodeGroup}
  repo: ${env.name}-node${targetNodes.id}-${fn.random}

settings:
  fields:
    - type: string
      name: backuppath
      caption: Path to backup
      default: /var/www/webroot
      required: true
    - type: string
      name: cycle
      caption: Backup cycle (cron format)
      default: 0 0 * * *
      required: true
    - type: spinner
      name: spretday
      caption: Days of retention
      min: 1
      max: 30
      increment: 1
      decimalPrecision: ""
      hidden: false
    - type: spinner
      name: spretmonth
      caption: Months of retention
      min: 0
      max: 12
      increment: 1
      decimalPrecision: ""
      hidden: false
    - type: spinner
      name: spretyear
      caption: Years of retention
      min: 0
      max: 10
      increment: 1
      decimalPrecision: ""
      hidden: false

buttons:
  - confirmText: Start manual backup now?
    loadingText: Backuping ...
    action: backup
    caption: Backup Now
    successText: https://raw.githubusercontent.com/hosteur-sa-ch/rag-hosteur-backup-fileagent/main/text/bksuccess.md
  - caption: Configure
    settings: main
    action: configure

onBeforeInstall: |
  let newActions = Object.assign({}, jps.actions);

  let UIenvs = jelastic.environment.control.GetContainerEnvVarsByGroup({envName: '${env.name}', nodeGroup: "hosteur-rag-backup-ui"});

  let envNodes = "";

  if (UIenvs.result == 0) {
    envNodes = UIenvs.object.RESTICUI_NODES;
    if(!envNodes) envNodes = "";
  }

  newActions.adjustEnvVarsUi = {
    "api": "jelastic.environment.control.AddContainerEnvVars",
    "nodeGroup": "hosteur-rag-backup-ui",
    "vars": {
      NODE${targetNodes.id}_RESTIC_REPOSITORY: "s3:s3.hosteur.io/${globals.repo}",
      RESTICUI_NODES: envNodes + "NODE${targetNodes.id},"
    }
  }

  return {
    result: 0,
    actions: newActions
  };

onInstall:
  - testUIPresent
  - adjustEnvVarsUi
  - adjust-env-vars
  - link-ui-to-agent
  - restic-deploy
  - restic-init
  - restic-cron
  - add-restore-volume-fav
  - add-restore-volume
  - restart-ui


onUninstall:
  - restic-remove
  - remove-env-vars
  - remove-link-ui-to-agent

actions:
  testUIPresent:
    set:
      UIPresent: false
    forEach(env.nodes):
      if("${@i.nodeGroup}" == "hosteur-rag-backup-ui"):
        set:
          UIPresent: true
    if(${this.UIPresent} == false):
      stopEvent:
        type: error
        message: /text/warning_ui.md

  adjust-env-vars:
    api[${globals.nodeID}]: env.control.AddContainerEnvVars
    vars:
      RESTIC_BACKUPPATH: ${settings.backuppath}

  link-ui-to-agent:
    api:
      method: environment.control.linkdockernodes
      params:
          envName : ${env.name}
          sourceNodeId : ${nodes.hosteur-rag-backup-ui[0].id}
          targetNodeId : ${globals.nodeID}
          alias : "UI"

  restic-deploy-yum:
    cmd[${globals.nodeID}]: |-
      yum install yum-plugin-copr -y
      yum copr enable copart/restic -y
      yum install restic -y
    user: root

  restic-deploy:
    cmd[${globals.nodeID}]: |-
      curl -L https://raw.githubusercontent.com/hosteur-sa-ch/rag-hosteur-backup-fileagent/main/restic-bin/restic.tar.gz -o /tmp/restic.tar.gz
      tar -xf /tmp/restic.tar.gz -C /usr/bin/
      chmod +x /usr/bin/restic
    user: root

  restic-init:
    cmd[${globals.nodeID}]: |-
      RESTIC_REPOSITORY=$UI_NODE${targetNodes.id}_RESTIC_REPOSITORY RESTIC_PASSWORD=$UI_RESTIC_PASSWORD AWS_ACCESS_KEY_ID=$UI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$UI_AWS_SECRET_ACCESS_KEY restic init
    user: root

  restic-cron:
    cmd[${globals.nodeID}]: |-
      touch /var/log/hosteurbackup.log
      chmod 766 /var/log/hosteurbackup.log
      touch /var/log/hosteurbackup_err.log
      chmod 766 /var/log/hosteurbackup_err.log
      touch /var/spool/cron/root
      /usr/bin/crontab /var/spool/cron/root
      cat > /root/hosteurbackup.sh <<-EOM
      #!/bin/bash
      export AWS_ACCESS_KEY_ID=$UI_AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY=$UI_AWS_SECRET_ACCESS_KEY
      export RESTIC_REPOSITORY=$UI_NODE${targetNodes.id}_RESTIC_REPOSITORY
      export RESTIC_PASSWORD=$UI_RESTIC_PASSWORD
      export RESTIC_BACKUPPATH=${settings.backuppath}
      restic backup --tag Scheduled $RESTIC_BACKUPPATH >>/var/log/hosteurbackup.log 2>/var/log/hosteurbackup_err.log
      restic forget --keep-daily ${settings.spretday} --keep-monthly ${settings.spretmonth} --keep-yearly ${settings.spretyear} --tag Scheduled >>/var/log/hosteurbackup.log 2>>/var/log/hosteurbackup_err.log
      restic prune >>/var/log/hosteurbackup.log 2>>/var/log/hosteurbackup_err.log
      EOM
      chmod +x /root/hosteurbackup.sh
      echo "${settings.cycle} /root/hosteurbackup.sh" > /var/spool/cron/root
      cat > /usr/bin/hstbk-status <<-EOM
      #!/bin/bash
      export AWS_ACCESS_KEY_ID=$UI_AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY=$UI_AWS_SECRET_ACCESS_KEY
      export RESTIC_REPOSITORY=$UI_NODE${targetNodes.id}_RESTIC_REPOSITORY
      export RESTIC_PASSWORD=$UI_RESTIC_PASSWORD
      export RESTIC_BACKUPPATH=${settings.backuppath}
      echo "Hosteur Backup Snapshots"
      echo "----------"
      restic snapshots
      echo "Hosteur Backup Statistics"
      echo "----------"
      restic stats
      echo "Hosteur Backup Errors"
      echo "----------"
      restic check
      EOM
      chmod +x /usr/bin/hstbk-status      
    user: root

  restic-sudo:
    if ('${targetNodes.nodeType}' != 'docker' && '${targetNodes.nodeType}' != 'storage'):
      cmd[${globals.nodeID}]: |-
        curl -fsS https://raw.githubusercontent.com/hosteur-sa-ch/rag-hosteur-backup-fileagent/main/scripts/setsudocmd.sh | /bin/bash
    user: root

  add-restore-volume:
    api:
      method: environment.control.setdockervolumesfrom
      params:
          envName : ${env.name}
          nodeGroup: ${globals.nodeGroup}
          data: "[{\"sourcePath\": \"/backup-restore\", \"readOnly\": false, \"protocol\": \"NFS\", \"sourceNodeId\": ${nodes.hosteur-rag-backup-ui[0].id} }]"

  add-restore-volume-fav:
    api:
      method: environment.file.addfavorite
      params:
          envName : ${env.name}
          nodeGroup: ${globals.nodeGroup}
          path : "/backup-restore"
  
  restart-ui:
    restartNodes:
    - nodeGroup: hosteur-rag-backup-ui
      reboot: true

  remove-env-vars:
    api[${globals.nodeID}]: env.control.RemoveContainerEnvVars
    vars:
      [
        "RESTIC_BACKUPPATH",
      ]

  restic-remove:
    cmd[${globals.nodeID}]: |-
      rm -rf /usr/bin/restic
      rm -rf /root/hosteurbackup.sh
      rm -rf /usr/bin/hstbk-status
      rm -rf /etc/sudoers.d/hosteur
    user: root

  remove-link-ui-to-agent:
    api:
      method: environment.control.unlinkdockernodes
      params:
          envName : ${env.name}
          sourceNodeId : ${nodes.hosteur-rag-backup-ui[0].id}
          targetNodeId : ${globals.nodeID}
          alias : "UI"

  remove-restore-volume-fav:
    api:
      method: environment.file.removefavorite
      params:
          envName : ${env.name}
          nodeGroup: ${globals.nodeGroup}
          path : "/backup-restore"

  remove-restore-volume:
    api:
      method: environment.control.removecontainervolumes
      params:
          envName : ${env.name}
          nodeGroup: ${globals.nodeGroup}
          data: "/backup-restore"

  backup: # envars (links)
    cmd[${globals.nodeID}]: |-
      RESTIC_REPOSITORY=$UI_NODE${targetNodes.id}_RESTIC_REPOSITORY RESTIC_PASSWORD=$UI_RESTIC_PASSWORD AWS_ACCESS_KEY_ID=$UI_AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY=$UI_AWS_SECRET_ACCESS_KEY restic backup --tag Manual $RESTIC_BACKUPPATH
    user: root
    return:
      type: success
      message: Manual Backup is complete, you can view it as "Manual" on you Backup Dashboard.

  configure:
    api[${globals.nodeID}]: env.control.AddContainerEnvVars
    vars:
      RESTIC_BACKUPPATH: ${settings.backuppath}
    cmd[${globals.nodeID}]: |-
      touch /var/spool/cron/root
      /usr/bin/crontab /var/spool/cron/root
      cat > /root/hosteurbackup.sh <<-EOM
      #!/bin/bash
      export AWS_ACCESS_KEY_ID=$UI_AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY=$UI_AWS_SECRET_ACCESS_KEY
      export RESTIC_REPOSITORY=$UI_NODE${targetNodes.id}_RESTIC_REPOSITORY
      export RESTIC_PASSWORD=$UI_RESTIC_PASSWORD
      export RESTIC_BACKUPPATH=${settings.backuppath}
      restic backup --tag Scheduled $RESTIC_BACKUPPATH >>/var/log/hosteurbackup.log 2>/var/log/hosteurbackup_err.log
      restic forget --keep-daily ${settings.spretday} --keep-monthly ${settings.spretmonth} --keep-yearly ${settings.spretyear} --tag Scheduled >>/var/log/hosteurbackup.log 2>>/var/log/hosteurbackup_err.log
      restic prune >>/var/log/hosteurbackup.log 2>>/var/log/hosteurbackup_err.log
      EOM
      chmod +x /root/hosteurbackup.sh
      sed -i 's=.*/root/hosteurbackup.*=${settings.cycle} /root/hosteurbackup.sh=' /var/spool/cron/root
    user: root